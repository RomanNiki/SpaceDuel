//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/Scripts/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""FirstPlayer"",
            ""id"": ""b4448d25-f64e-4166-aade-5c4c1b22e07c"",
            ""actions"": [
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""74c4d66f-575e-4dbb-a54a-faf958e890eb"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Acceleration"",
                    ""type"": ""Button"",
                    ""id"": ""ca452cb3-b5d7-4db6-b398-33ffba90d9a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FirstShoot"",
                    ""type"": ""Button"",
                    ""id"": ""e187f64e-edfb-40fd-8dce-8c66addc3bb9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondShoot"",
                    ""type"": ""Button"",
                    ""id"": ""10a282f5-f309-4487-a867-e6c5ed64e160"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""63367e7c-9175-485a-873e-c4edb3f7248d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""01151d7c-50fb-4ef9-96c0-8277eab8f591"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d18fa665-4ae8-43cc-a8dc-39bd4497a287"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3d983d36-33f2-4b4f-8144-085fd7d68b82"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70e4f9ea-f647-4146-9137-1abb1d888639"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fdddec04-889d-4c55-b4b1-2755e67895f5"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SecondPlayer"",
            ""id"": ""17e5fe21-936d-4fa5-a664-637fe7fce430"",
            ""actions"": [
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""1875887b-367f-477b-8df7-5fc4c5f93403"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Acceleration"",
                    ""type"": ""Button"",
                    ""id"": ""b6d914c1-1e6e-486a-8596-20fdbc076bd8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FirstShoot"",
                    ""type"": ""Button"",
                    ""id"": ""49a3a4c1-1871-410c-96c0-4e95b6ff8801"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondShoot"",
                    ""type"": ""Button"",
                    ""id"": ""530b1f9a-2497-44a2-acf5-a529f30c0b41"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""b5c90004-7424-4261-a6f6-789dbd8d051c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""defd43d8-4e09-4d02-90d0-60e4392c217d"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e0b303e9-4d9d-4aa4-a7d2-650c0a54c67a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4e74d225-837b-4cc4-8833-016a729e549c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""622bec10-89e1-4a0a-906e-e59a2125c380"",
                    ""path"": ""<Keyboard>/rightAlt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""538d3952-ddea-428c-a9c8-d30dbd4b51c1"",
                    ""path"": ""<Keyboard>/rightCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyBoard"",
            ""bindingGroup"": ""KeyBoard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // FirstPlayer
        m_FirstPlayer = asset.FindActionMap("FirstPlayer", throwIfNotFound: true);
        m_FirstPlayer_Rotate = m_FirstPlayer.FindAction("Rotate", throwIfNotFound: true);
        m_FirstPlayer_Acceleration = m_FirstPlayer.FindAction("Acceleration", throwIfNotFound: true);
        m_FirstPlayer_FirstShoot = m_FirstPlayer.FindAction("FirstShoot", throwIfNotFound: true);
        m_FirstPlayer_SecondShoot = m_FirstPlayer.FindAction("SecondShoot", throwIfNotFound: true);
        // SecondPlayer
        m_SecondPlayer = asset.FindActionMap("SecondPlayer", throwIfNotFound: true);
        m_SecondPlayer_Rotate = m_SecondPlayer.FindAction("Rotate", throwIfNotFound: true);
        m_SecondPlayer_Acceleration = m_SecondPlayer.FindAction("Acceleration", throwIfNotFound: true);
        m_SecondPlayer_FirstShoot = m_SecondPlayer.FindAction("FirstShoot", throwIfNotFound: true);
        m_SecondPlayer_SecondShoot = m_SecondPlayer.FindAction("SecondShoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FirstPlayer
    private readonly InputActionMap m_FirstPlayer;
    private IFirstPlayerActions m_FirstPlayerActionsCallbackInterface;
    private readonly InputAction m_FirstPlayer_Rotate;
    private readonly InputAction m_FirstPlayer_Acceleration;
    private readonly InputAction m_FirstPlayer_FirstShoot;
    private readonly InputAction m_FirstPlayer_SecondShoot;
    public struct FirstPlayerActions
    {
        private @PlayerInput m_Wrapper;
        public FirstPlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotate => m_Wrapper.m_FirstPlayer_Rotate;
        public InputAction @Acceleration => m_Wrapper.m_FirstPlayer_Acceleration;
        public InputAction @FirstShoot => m_Wrapper.m_FirstPlayer_FirstShoot;
        public InputAction @SecondShoot => m_Wrapper.m_FirstPlayer_SecondShoot;
        public InputActionMap Get() { return m_Wrapper.m_FirstPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FirstPlayerActions set) { return set.Get(); }
        public void SetCallbacks(IFirstPlayerActions instance)
        {
            if (m_Wrapper.m_FirstPlayerActionsCallbackInterface != null)
            {
                @Rotate.started -= m_Wrapper.m_FirstPlayerActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_FirstPlayerActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_FirstPlayerActionsCallbackInterface.OnRotate;
                @Acceleration.started -= m_Wrapper.m_FirstPlayerActionsCallbackInterface.OnAcceleration;
                @Acceleration.performed -= m_Wrapper.m_FirstPlayerActionsCallbackInterface.OnAcceleration;
                @Acceleration.canceled -= m_Wrapper.m_FirstPlayerActionsCallbackInterface.OnAcceleration;
                @FirstShoot.started -= m_Wrapper.m_FirstPlayerActionsCallbackInterface.OnFirstShoot;
                @FirstShoot.performed -= m_Wrapper.m_FirstPlayerActionsCallbackInterface.OnFirstShoot;
                @FirstShoot.canceled -= m_Wrapper.m_FirstPlayerActionsCallbackInterface.OnFirstShoot;
                @SecondShoot.started -= m_Wrapper.m_FirstPlayerActionsCallbackInterface.OnSecondShoot;
                @SecondShoot.performed -= m_Wrapper.m_FirstPlayerActionsCallbackInterface.OnSecondShoot;
                @SecondShoot.canceled -= m_Wrapper.m_FirstPlayerActionsCallbackInterface.OnSecondShoot;
            }
            m_Wrapper.m_FirstPlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @Acceleration.started += instance.OnAcceleration;
                @Acceleration.performed += instance.OnAcceleration;
                @Acceleration.canceled += instance.OnAcceleration;
                @FirstShoot.started += instance.OnFirstShoot;
                @FirstShoot.performed += instance.OnFirstShoot;
                @FirstShoot.canceled += instance.OnFirstShoot;
                @SecondShoot.started += instance.OnSecondShoot;
                @SecondShoot.performed += instance.OnSecondShoot;
                @SecondShoot.canceled += instance.OnSecondShoot;
            }
        }
    }
    public FirstPlayerActions @FirstPlayer => new FirstPlayerActions(this);

    // SecondPlayer
    private readonly InputActionMap m_SecondPlayer;
    private ISecondPlayerActions m_SecondPlayerActionsCallbackInterface;
    private readonly InputAction m_SecondPlayer_Rotate;
    private readonly InputAction m_SecondPlayer_Acceleration;
    private readonly InputAction m_SecondPlayer_FirstShoot;
    private readonly InputAction m_SecondPlayer_SecondShoot;
    public struct SecondPlayerActions
    {
        private @PlayerInput m_Wrapper;
        public SecondPlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotate => m_Wrapper.m_SecondPlayer_Rotate;
        public InputAction @Acceleration => m_Wrapper.m_SecondPlayer_Acceleration;
        public InputAction @FirstShoot => m_Wrapper.m_SecondPlayer_FirstShoot;
        public InputAction @SecondShoot => m_Wrapper.m_SecondPlayer_SecondShoot;
        public InputActionMap Get() { return m_Wrapper.m_SecondPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SecondPlayerActions set) { return set.Get(); }
        public void SetCallbacks(ISecondPlayerActions instance)
        {
            if (m_Wrapper.m_SecondPlayerActionsCallbackInterface != null)
            {
                @Rotate.started -= m_Wrapper.m_SecondPlayerActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_SecondPlayerActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_SecondPlayerActionsCallbackInterface.OnRotate;
                @Acceleration.started -= m_Wrapper.m_SecondPlayerActionsCallbackInterface.OnAcceleration;
                @Acceleration.performed -= m_Wrapper.m_SecondPlayerActionsCallbackInterface.OnAcceleration;
                @Acceleration.canceled -= m_Wrapper.m_SecondPlayerActionsCallbackInterface.OnAcceleration;
                @FirstShoot.started -= m_Wrapper.m_SecondPlayerActionsCallbackInterface.OnFirstShoot;
                @FirstShoot.performed -= m_Wrapper.m_SecondPlayerActionsCallbackInterface.OnFirstShoot;
                @FirstShoot.canceled -= m_Wrapper.m_SecondPlayerActionsCallbackInterface.OnFirstShoot;
                @SecondShoot.started -= m_Wrapper.m_SecondPlayerActionsCallbackInterface.OnSecondShoot;
                @SecondShoot.performed -= m_Wrapper.m_SecondPlayerActionsCallbackInterface.OnSecondShoot;
                @SecondShoot.canceled -= m_Wrapper.m_SecondPlayerActionsCallbackInterface.OnSecondShoot;
            }
            m_Wrapper.m_SecondPlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @Acceleration.started += instance.OnAcceleration;
                @Acceleration.performed += instance.OnAcceleration;
                @Acceleration.canceled += instance.OnAcceleration;
                @FirstShoot.started += instance.OnFirstShoot;
                @FirstShoot.performed += instance.OnFirstShoot;
                @FirstShoot.canceled += instance.OnFirstShoot;
                @SecondShoot.started += instance.OnSecondShoot;
                @SecondShoot.performed += instance.OnSecondShoot;
                @SecondShoot.canceled += instance.OnSecondShoot;
            }
        }
    }
    public SecondPlayerActions @SecondPlayer => new SecondPlayerActions(this);
    private int m_KeyBoardSchemeIndex = -1;
    public InputControlScheme KeyBoardScheme
    {
        get
        {
            if (m_KeyBoardSchemeIndex == -1) m_KeyBoardSchemeIndex = asset.FindControlSchemeIndex("KeyBoard");
            return asset.controlSchemes[m_KeyBoardSchemeIndex];
        }
    }
    public interface IFirstPlayerActions
    {
        void OnRotate(InputAction.CallbackContext context);
        void OnAcceleration(InputAction.CallbackContext context);
        void OnFirstShoot(InputAction.CallbackContext context);
        void OnSecondShoot(InputAction.CallbackContext context);
    }
    public interface ISecondPlayerActions
    {
        void OnRotate(InputAction.CallbackContext context);
        void OnAcceleration(InputAction.CallbackContext context);
        void OnFirstShoot(InputAction.CallbackContext context);
        void OnSecondShoot(InputAction.CallbackContext context);
    }
}
